# .github/workflows/ci.yml
name: CI/CD Pipeline

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main


jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Grant permission to write to GHCR

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase owner name as output # Set owner_lowercase as a step output
        id: set_owner_lc # Give this step an ID to reference its outputs
        run: |
          # Also set as an environment variable for consistency, though output is key here
          echo "owner_lowercase=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          # Set as a step output, which is accessible by 'uses:' actions in the same job
          echo "owner_lowercase=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      # Build and push Backend Image
      - name: Build and push Backend Docker image
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: ./demo # Path to your backend Dockerfile context
          file: ./demo/Dockerfile # Path to your backend Dockerfile
          push: true
          # Access the output from the 'set_owner_lc' step
          tags: ghcr.io/${{ steps.set_owner_lc.outputs.owner_lowercase }}/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push Frontend Image
      - name: Build and push Frontend Docker image
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./Vite-Jsx # Path to your frontend Dockerfile context
          file: ./Vite-Jsx/Dockerfile # Path to your frontend Dockerfile
          push: true
          # Access the output from the 'set_owner_lc' step
          tags: ghcr.io/${{ steps.set_owner_lc.outputs.owner_lowercase }}/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-services:
    needs: build-and-push # Ensure images are built before testing
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read # Need to read images from GHCR

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase owner name # Re-set for this job, as env vars don't persist across jobs
        run: echo "owner_lowercase=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # Pull the newly built images from GHCR
      - name: Pull Backend Image from GHCR
        run: docker pull ghcr.io/${{ env.owner_lowercase }}/backend:${{ github.sha }}

      - name: Pull Frontend Image from GHCR
        run: docker pull ghcr.io/${{ env.owner_lowercase }}/frontend:${{ github.sha }}

      - name: Install jq # Install jq for parsing JSON output from docker inspect
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Update docker-compose.yml for CI
        # This step dynamically modifies your docker-compose.yml to use the
        # images from GHCR instead of building them locally.
        # This is good practice to test the actual pushed images.
        # Using '|' as delimiter for sed to avoid issues with '/' in paths.
        run: |
          # The '' after -i is for macOS compatibility, harmless on Linux
          sed -i '' 's|build:\n      context: ./demo|image: ghcr.io/${{ env.owner_lowercase }}/backend:${{ github.sha }}|g' docker-compose.yml
          sed -i '' 's|build:\n      context: ./Vite-Jsx|image: ghcr.io/${{ env.owner_lowercase }}/frontend:${{ github.sha }}|g' docker-compose.yml
          # Remove the 'volumes' line for the frontend, as we're testing the built image
          # This assumes 'volumes:' is directly followed by '- ./Vite-Jsx/dist:/usr/share/nginx/html'
          sed -i '' '/volumes:/,+1d' docker-compose.yml

      - name: Bring up services with Docker Compose
        run: docker compose up -d

      - name: Wait for services to be healthy
        # Use a loop to check service health. This is more robust than a fixed sleep.
        # Adjust timeout as needed.
        timeout-minutes: 5 # Maximum time to wait
        run: |
          echo "Waiting for DB service to be healthy..."
          for i in $(seq 1 10); do
            # Use xargs to handle potential whitespace from docker compose ps -q
            DB_HEALTH=$(docker inspect --format='{{json .State.Health}}' $(docker compose ps -q db | xargs) | jq -r .Status)
            echo "DB Status: $DB_HEALTH"
            if [ "$DB_HEALTH" == "healthy" ]; then
              echo "DB is healthy."
              break
            fi
            sleep 10
          done
          if [ "$DB_HEALTH" != "healthy" ]; then
            echo "DB service did not become healthy in time."
            docker compose logs db
            exit 1
          fi

          echo "Waiting for Backend service to be running..."
          # For backend, checking 'running' state is often sufficient if it depends on healthy DB
          for i in $(seq 1 10); do
            # Use xargs to handle potential whitespace from docker compose ps -q
            BACKEND_STATUS=$(docker inspect --format='{{.State.Status}}' $(docker compose ps -q backend | xargs))
            echo "Backend Status: $BACKEND_STATUS"
            if [ "$BACKEND_STATUS" == "running" ]; then
              echo "Backend is running."
              break
            fi
            sleep 10
          done
          if [ "$BACKEND_STATUS" != "running" ]; then
            echo "Backend service did not become running in time."
            docker compose logs backend
            exit 1
          fi

          echo "Services are up and running."
          docker compose ps

      # --- Placeholder for Running Tests ---
      # This is where you would execute your tests.

      - name: Run Backend Unit Tests
        run: |
          echo "Running backend unit/integration tests..."
          cd demo
          # For Spring Boot, 'mvn test' typically runs unit and integration tests.
          # Ensure Maven is available or use a 'setup-java' action before this step.
          mvn test

      - name: Verify Backend Endpoint (Simple Integration Test)
        # This is a very basic check to see if the backend is reachable.
        # We'll use a temporary busybox container on the same network.
        run: |
          echo "Verifying backend /actuator/health endpoint..."
          docker run --rm --network app-network curlimages/curl:latest http://backend:8080/actuator/health || { echo "Backend health check failed!"; exit 1; }
          echo "Backend /actuator/health endpoint is reachable."

      - name: Teardown services
        if: always() # Ensure this runs even if previous steps fail
        run: docker compose down